{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "green",
    "glyph" : "magic"
  },
  "name" : "Growatt 3",
  "script" : "\/\/ License: Personal use only. See LICENSE for details.\n\/\/ This script was created by Flopp999\n\/\/ Support me with a coffee https:\/\/www.buymeacoffee.com\/flopp999 \nlet version = 0.23\nlet token;\nlet deviceSn;\nlet epv1 = 23\nlet epv2 = 18\n\nlet homekwh = 23;\nlet batterysoc = 100\nlet exportkwh = 33\nlet importkwh = 1\nlet batterychargekwh = 5\nlet batterydischargekwh = 7\n\/\/ === API-anrop ===\n\n\/\/const baseURL = \"https:\/\/api.checkwatt.se\";\nlet batteryCapacityKwh;\nlet widget;\nlet day;\nlet date;\nlet language;\nlet settings = {}\nlet langId;\nlet hour;\nlet minute;\nlet translationData;\nlet monthName;\nlet currentLang;\n\nconst fileNameSettings = Script.name() + \"_Settings.json\";\nconst fileNameTranslations = Script.name() + \"_Translations.json\";\nconst fileNameData = Script.name() + \"_Data.json\";\nconst fileNameDataYear = Script.name() + \"_DataYear.json\";\nconst fm = FileManager.iCloud();\nconst dir = fm.documentsDirectory();\nconst filePathSettings = fm.joinPath(dir, fileNameSettings);\nconst filePathTranslations = fm.joinPath(dir, fileNameTranslations);\nconst filePathData = fm.joinPath(dir, fileNameData);\nconst filePathdataYear = fm.joinPath(dir, fileNameDataYear);\n\nif (!config.runsInWidget){\n\tawait downLoadFiles();\n  await updatecode();\n  await readTranslations();\n  await readsettings();\n  await createVariables();\n  \/\/await start();\n}\n\nif (config.runsInWidget){\n await readsettings();\n}\nif (config.runsInWidget){\n  await updatecode();\n  await createVariables();\n}\n\nasync function start() {\n  const [topType, topDay] = settings.showattop.split(\",\").map(s => s.trim());\n  const [middleType, middleDay] = settings.showatmiddle.split(\",\").map(s => s.trim());\n \/\/ const [bottomType, bottomDay] = settings.showatbottom.split(\",\").map(s => s.trim());\n  let alert = new Alert();\n  \/\/let vatText = includevat == 1 ? t(\"yes\") : t(\"no\")\n  alert.message = \n    t(\"changesetup\") + \"?\\n\" +\n    t(\"top\").charAt(0).toUpperCase() + t(\"top\").slice(1) + \":\\n\" + t(topType) + (topDay ? \", \" + t(topDay) : \"\") + \"\\n\" +\n    t(\"middle\").charAt(0).toUpperCase() + t(\"middle\").slice(1) + \":\\n\" + t(middleType) + (middleDay ? \", \" + t(middleDay) : \"\")\n    \/\/t(\"bottom\").charAt(0).toUpperCase() + t(\"bottom\").slice(1) + \":\\n\" + t(bottomType) + (bottomDay ? \", \" + t(bottomDay) : \"\")\n  alert.addAction(t(\"yes\"));\n  alert.addAction(t(\"no\"));\n  let index = await alert.presentAlert();\n  if (index === 0) {\n    settings = await ask();\n    fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  }\n}\n\nasync function downLoadFiles() {\n\tconst baseUrl = \"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-Growatt\/main\/assets\/\"\n\t\/\/ Filer att hämta – json + bilder\n\tconst filesToDownload = [\n\t\t\"soc.png\",\n\t\t\"charge.png\",\n\t\t\"discharge.png\",\n\t\t\"export.png\",\n\t\t\"home.png\",\n\t\t\"import.png\",\n\t\t\"solar.png\"\n\t]\n\t\/\/ Ladda ner varje fil\n\tfor (let filename of filesToDownload) {\n\t\tconst url = baseUrl + filename\n\t\tconst filePath = fm.joinPath(dir, filename)\n\t\ttry {\n\t\t\tconst req = new Request(url)\n\t\t\treq.timeoutInterval = 5\n\t\t\tconst image = await req.loadImage()\n\t\t\tfm.writeImage(filePath, image)\n\t\t} catch (error) {\n\t\t\tconsole.error(`Fel vid nedladdning av ${filename}:`, error)\n\t\t}\n\t}\n}\n\n\n\nasync function updatecode() {\n  try {\n    const req = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-Growatt\/main\/Version.txt\");\n    req.timeoutInterval = 1;\n    const serverVersion = await req.loadString()\n    if (version < serverVersion) {\n      try {\n        const req = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-Growatt\/main\/Growatt.js\");\n        req.timeoutInterval = 1;\n        const response = await req.load();\n        const status = req.response.statusCode;\n        if (status !== 200) {\n          throw new Error(`Error: HTTP ${status}`);\n        }\n        const codeString = response.toRawString();\n        fm.writeString(module.filename, codeString);\n\n        const reqTranslations = new Request(\"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-Growatt\/main\/Translations.json\");\n        reqTranslations.timeoutInterval = 1;\n        const responseTranslations = await reqTranslations.load();\n        const statusTranslations = reqTranslations.response.statusCode;\n        if (statusTranslations !== 200) {\n          throw new Error(`Error: HTTP ${statusTranslations}`);\n        }\n        const codeStringTranslations = responseTranslations.toRawString();\n        fm.writeString(filePathTranslations, codeStringTranslations);\n        \/\/fm.remove(filePathSettings);\n        let updateNotify = new Notification();\n        updateNotify.title = Script.name();\n        updateNotify.body = \"New version installed, \" + serverVersion;\n        updateNotify.sound = \"default\";\n        await updateNotify.schedule();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  } catch (error) {\n    console.error(\"The update failed. Please try again later.\" + error);\n  }\n}\n\nasync function readsettings() {\n  try {\n    if (fm.fileExists(filePathSettings)) {\n      let raw = fm.readString(filePathSettings);\n      settings = JSON.parse(raw);\n\t\t\tif (!settings.token || settings.token.length === 0) {\n  \t\t\tsettings.token = \"token\"\n\t\t\t}\n\t\t\tif (!settings.deviceSn || settings.deviceSn.length === 0) {\n  \t\t\tsettings.deviceSn = \"deviceSn\"\n\t\t\t}\n\t\t\tif (!settings.updatehour || settings.updatehour.length === 0) {\n  \t\t\tsettings.updatehour = \"0\"\n\t\t\t}\n\t\t\tif (!settings.updateminute || settings.updateminute.length === 0) {\n  \t\t\tsettings.updateminute = \"01\"\n\t\t\t}\n\t\t\tif (!settings.language || settings.language.length === 0) {\n  \t\t\tsettings.language = 1\n\t\t\t}\n      langId = settings.language; \/\/ 1 = ENG, 2 = DE, 3 = SV\n      await readTranslations();\n    } else {\n      if (config.runsInWidget) {\n        return;\n      }\n      await askForLanguage();\n      await readTranslations();\n      let alert = new Alert();\n      alert.title = \"Support\";\n      alert.message = t(\"buymeacoffee\") + \"?\";\n      alert.addAction(t(\"noway\"));\n\t\t\talert.addAction(\"Ko-fi\");\n      alert.addCancelAction(\"Buymeacoffee\");\n      let response = await alert.present();\n      if (response === -1) {\n        Safari.open(\"https:\/\/buymeacoffee.com\/flopp999\");\n      }\n\t\t\tif (response === 1) {\n        Safari.open(\"https:\/\/ko-fi.com\/flopp999\");\n      }\n      throw new Error(\"Settings file not found\");\n    }\n  } catch (error) {\n    if (config.runsInWidget) {\n      return;\n    }\n    console.warn(\"Settings file not found or error reading file: \" + error.message);\n    settings = await ask();\n    fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  }\n}\n\nasync function getStatus() {\n  const endpoint = `\/site\/Statuses?serial=` + rpiSerial;\n  const url = baseURL + endpoint;\n  const headers = {\n    \"Authorization\": `Bearer ${token}`,\n    \"Accept\": \"application\/json\"\n  };\n  const req = new Request(url);\n  req.method = \"GET\";\n  req.headers = headers;\n  try {\n    const responsestatus = await req.loadJSON();\n    if (req.response.statusCode === 200) {\n\t\t\tif (responsestatus[0][\"Pending\"][0] == \"fcrd\") {\n\t\t\t\tmode = \"CO\"\n\t\t\t} else if (responsestatus[0][\"Pending\"][0] == \"sc\") {\n\t\t\t\tmode = \"SC\"\n\t\t\t} else {\n\t\t\t\tmode = \"Unknown\"\n\t\t\t}\n\t\t\tif (responsestatus[0][\"Service\"][0] == \"off\") {\n\t\t\t\tmodeStatus = t(\"deactivated\")\n\t\t\t} else if (responsestatus[0][\"Service\"][0] == \"fcrd\" || responsestatus[0][\"Service\"][0] == \"sc\") {\n\t\t\t\tmodeStatus = t(\"activated\")\n\t\t\t} else {\n\t\t\t\tmodeStatus = \"Unknown\"\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tFpUpInKw = responsestatus[0][\"FpUpInKw\"]\n\t\t\tFpDownInKw = responsestatus[0][\"FpDownInKw\"]\n\t\t\tChargingMax = responsestatus[0][\"RelatedMeters\"][0][\"PeakAcKw\"]\n\t\t\tDischargingMax = responsestatus[0][\"RelatedMeters\"][1][\"PeakAcKw\"]\n      return null;\n    } else {\n      console.error(\"❌ Fel statuskod:\", req.response.statusCode);\n    }\n  } catch (err) {\n    console.error(\"❌ Fel vid hämtning av status\", err);\n  }\n  return null;\n}\n\n\/\/ == Hämta revenue med JWT ==\nasync function fetchData(jwtToken) {\n\tPath = filePathData\n\tDateObj = new Date();\n\tasync function getData() {\n\t\tconst url = \"https:\/\/openapi.growatt.com\/v1\/device\/tlx\/tlx_last_data\";\n\t\tlet req = new Request(url);\n\t\treq.method = \"POST\";\n\t\treq.headers = {\n\t\t  \"Content-Type\": \"application\/x-www-form-urlencoded\",\n\t\t  \"token\": token\n\t\t};\n\t\treq.body = `tlx_sn=${encodeURIComponent(deviceSn)}`;\n\t\ttry {\n\t\t\treq.timeoutInterval = 1;\n\t  \tconst response = await req.loadJSON();\n\t\t\tif (req.response.statusCode === 200) {\n\t\t\t\tconst dataJSON = JSON.stringify(response, null ,2);\n\t\t\t\tfm.writeString(filePathData, dataJSON);\n\t\t  \tconsole.log(\"Svar från Growatt:\", response);\n\t\t    settings.updatehour = String(DateObj.getHours()).padStart(2,\"0\");\n\t\t\t\tsettings.updateminute = String(DateObj.getMinutes()).padStart(2,\"0\");\n\t\t\t\tfm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n\t\t\t} else {\n\t\t\t\tconsole.error(\"❌ Fel statuskod:\", req.response.statusCode);\n\t\t\t}\n\t\t} catch (err) {\n\t  \tconsole.error(\"Fel vid API-anrop:\", err);\n\t\t}\n\t}\n\t\n\tif (fm.fileExists(filePathData)) {\n\t\tlet modified = fm.modificationDate(filePathData);\n\t\tlet now = new Date();\n\t\tlet minutesDiff = (now - modified) \/ (1000 * 60);\n\t\tif ( minutesDiff > 10 ) {\n\t\t\tawait getData();\n\t\t}\n\t} else {\n\t\tawait getData();\n\t}\n\t\/\/hour = DateObj.getHours();\n\t\/\/minute = DateObj.getMinutes();\n\tlet content = fm.readString(filePathData);\n\tdata = JSON.parse(content);\n\n\n\tepv1 = data[\"data\"][\"epv1Today\"];\n\t\t    epv2 = data[\"data\"][\"epv2Today\"];\n\t\t    batterysoc = data[\"data\"][\"bmsSoc\"];\n\t\t    homekwh = data[\"data\"][\"elocalLoadToday\"];\n\t\t    exportkwh = data[\"data\"][\"etoGridToday\"];\n\t\t    importkwh = data[\"data\"][\"etoUserToday\"];\n\t\t    batterychargekwh = data[\"data\"][\"echargeToday\"];\n\t\t    batterydischargekwh = data[\"data\"][\"edischargeToday\"];\n\n\tupdated = \"\" + hour + minute + \"\";\n}\n\nasync function createVariables() {\n  token = settings.token;\n  deviceSn = settings.deviceSn;\n\thour = settings.updatehour;\n\tminute = settings.updateminute;\n}\n\nasync function readTranslations() {\n  if (!fm.fileExists(filePathTranslations)) {\n    let url = \"https:\/\/raw.githubusercontent.com\/flopp999\/Scriptable-Growatt\/main\/Translations.json\";\n    let req = new Request(url);\n    req.timeoutInterval = 1;\n    let content = await req.loadString();\n    fm.writeString(filePathTranslations, content);\n  }\n  try {\n    translationData = JSON.parse(fm.readString(filePathTranslations));\n    const langMap = {\n      1: \"en\",\n      3: \"sv\"\n    };\n    currentLang = langMap[langId] || \"en\"; \/\/ fallback to english\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction t(key) {\n  const entry = translationData[key];\n  if (!entry) return `[${key}]`; \/\/ key is missing\n  return entry[currentLang] || entry[\"en\"] || `[${key}]`;\n}\n\nasync function ask() {\n  settings.token = await askForToken();\n  settings.deviceSn = await askForDeviceSn();\n  return settings\n}\n\n\/\/ Select resolution\nasync function askForLanguage() {\n  let alert = new Alert();\n  alert.message = \"Language\/Språk:\";\n  alert.addAction(\"English\");\n  alert.addAction(\"Svenska\");\n  let index = await alert.presentAlert();\n  settings.language = [1,3][index];\n  fm.writeString(filePathSettings, JSON.stringify(settings, null, 2)); \/\/ Pretty print\n  langId = settings.language; \/\/ 1 = ENG, 2 = DE, 3 = SV\n  return [1,3][index];\n}\n\n\/\/ Include extra cost?\nasync function askForToken() {\n  let alert = new Alert();\n  alert.title = \"Token\";\n  alert.message = (t(\"askfortoken\") + \"?\");\n  alert.addTextField(\"abc123abc123abc123\",settings.token).setDefaultKeyboard();\n  alert.addAction(\"OK\");\n  await alert.present();\n  let input = alert.textFieldValue(0);\n  token = input\n  return input;\n}\n\n\/\/ Include extra cost?\nasync function askForDeviceSn() {\n  let alert = new Alert();\n  alert.title = (\"Serial number\");\n  alert.message = (t(\"askfordevicesn\") + \"?\");\n  alert.addTextField().setDefaultKeyboard();\n  alert.addAction(\"OK\");\n  await alert.present();\n  let input = alert.textFieldValue(0);\n  deviceSn = input;\n  return input;\n}\n\nasync function Status(day) {\n\tlet row = listwidget.addStack();\n\trow.layoutHorizontally()\n  let left = row.addStack()\n  left.layoutVertically()\n\trow.addSpacer(40)\n\tlet mid = row.addStack()\n\tmid.layoutVertically()\n\tlet right = row.addStack()\n\tright.layoutVertically()\n\tlet whatday = left.addText(t(\"mode\") + \": \" + mode + \", \" + modeStatus);\n\twhatday.textColor = new Color(\"#ffffff\");\n\twhatday.font = Font.lightSystemFont(13);\n\twhatday = mid.addText(t(\"capacity\") + \": \" + String(batteryCapacityKwh) +  \"kWh\");\n\twhatday.textColor = new Color(\"#ffffff\");\n\twhatday.font = Font.lightSystemFont(13);\n  whatday = left.addText(t(\"charge\") + \": \" + String(ChargingMax) + \"kW\");\n  whatday.textColor = new Color(\"#ffffff\");\n\twhatday.font = Font.lightSystemFont(13);\n  whatday = mid.addText(t(\"up\") + \": \" + String(FpUpInKw) + \"kW\");\n  whatday.textColor = new Color(\"#ffffff\");\n  whatday.font = Font.lightSystemFont(13);\n\twhatday = left.addText(t(\"discharge\") + \": \" + String(DischargingMax) + \"kW\");\n\twhatday.textColor = new Color(\"#ffffff\");\n\twhatday.font = Font.lightSystemFont(13);\n\twhatday = mid.addText(t(\"down\") + \": \" + String(FpDownInKw) + \"kW\");\n\twhatday.textColor = new Color(\"#ffffff\");\n\twhatday.font = Font.lightSystemFont(13);\n}\n\n\n\nconst smallFont = 10;\nconst mediumFont = 12;\nconst bigFont = 13.5;\nconst now = new Date();\n\/\/ Hämta antalet dagar i innevarande månad\nconst daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\n\/\/ Skapa array från 1 till antal dagar\nconst daysArray = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n\nasync function renderSection(position) {\n  const value = settings[`showat${position}`];\n  if (!value || value === \"nothing\") return;\n\n  const [type, day] = value.split(\",\").map(s => s.trim());\n\t\n  const graphOption = settings.graphOption[position]\n  switch (type) {\n    case \"status\":\n      await Status(day);\n      break;\n    case \"graph\":\n      await Graph(day, graphOption);\n      break;\n    case \"revenue\":\n      await Revenue();\n      break;\n    default:\n  }\n}\n\nlet listwidget = new ListWidget();\n\nasync function Revenue() {\n\tlet ja = listwidget.addStack()\n  listwidget.addSpacer(10)\n\tlet save = listwidget.addStack();\n  save.layoutHorizontally()\n  let saveleft = save.addStack()\n  saveleft.layoutVertically()\n  save.addSpacer(20)\n  let savemid = save.addStack()\n  savemid.layoutVertically()\n  save.addSpacer(30)\n  let saveright = save.addStack()\n  saveright.layoutVertically()\n  save.addSpacer(20)\n  let savemost = save.addStack()\n  savemost.layoutVertically()\n  let te = saveleft.addText(String(monthName))\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\")\n  te = savemid.addText(\" \")\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = saveleft.addText(\"FCR-D\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n\tte = savemid.addText(String(Math.round(totalFcrd)) + \"kr\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = saveleft.addText(t(\"savings\"));\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n\tte = saveleft.addText(t(\"peakbought\"));\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = savemid.addText(String(Math.round(totalSavings)) + \"kr\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n\t te = savemid.addText(String(peakBought.toFixed(1)) + \"kW\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n\tte = saveright.addText(t(\"thisyear\"));\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n\tte = saveright.addText(\"FCR-D\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = saveright.addText(t(\"savings\"));\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = savemost.addText(\" \")\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = savemost.addText(String(Math.round(totalFcrdYear)) + \"kr\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n  te = savemost.addText(String(Math.round(totalSavingsYear)) + \"kr\");\n  te.font = Font.lightSystemFont(13);\n  te.textColor = new Color(\"#ffffff\");\n}\n\nasync function createWidget(){\n\t\/\/token = set loginAndGetToken();\n\tawait fetchData(token);\n\tconst date = new Date();\n\tlet solarkwh = epv1+epv2\n\/\/let widget = new ListWidget();\nlet first = listwidget.addStack()\nfirst.layoutHorizontally()\nfirst.addSpacer()\n\/\/let solarrow = widget.addStack();\n\/\/let importrow = widget.addStack()\nlet exportrowr = first.addStack()\nlet exportrow=exportrowr.addStack()\nexportrow.layoutVertically()\n\/\/let homerow = widget.addStack()\n\/\/let batterychargerow = widget.addStack()\n\/\/let batterydischargerow = widget.addStack()\nfirst.addSpacer()\nlet fm = FileManager.iCloud()\nlet exportpath = fm.joinPath(fm.documentsDirectory(), \"export.png\")\nexportimage = await fm.readImage(exportpath)\nlet importpath = fm.joinPath(fm.documentsDirectory(), \"import.png\")\nimportimage = await fm.readImage(importpath)\nlet solarpath = fm.joinPath(fm.documentsDirectory(), \"solar.png\")\nsolarimage = await fm.readImage(solarpath)\nlet homepath = fm.joinPath(fm.documentsDirectory(), \"home.png\")\nhomeimage = await fm.readImage(homepath)\nlet batterychargepath = fm.joinPath(fm.documentsDirectory(), \"charge.png\")\nbatterychargeimage = await fm.readImage(batterychargepath)\nlet batterydischargepath = fm.joinPath(fm.documentsDirectory(), \"discharge.png\")\nbatterydischargeimage = await fm.readImage(batterydischargepath)\nlet batterysocpath = fm.joinPath(fm.documentsDirectory(), \"soc.png\")\nbatterysocimage = await fm.readImage(batterysocpath)\n\nexportrow.addSpacer()\nkk=exportrow.addImage(solarimage);\nkk.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\nss=exportrow.addImage(homeimage);\nss.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\nii=exportrow.addImage(exportimage);\nii.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\npp=exportrow.addImage(importimage);\npp.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\nde=exportrow.addImage(batterychargeimage);\nde.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\nll=exportrow.addImage(batterydischargeimage);\nll.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\nexportrow.addSpacer()\nl=exportrow.addImage(batterysocimage);\nl.imageSize = new Size(40, 40); \/\/ Extra kontroll på bildstorlek\n\/\/exportrow.addSpacer()\nexportrowr.addSpacer(10)\n\nlet exportvalue = exportrowr.addStack()\nexportvalue.layoutVertically()\n\nexportvalue.addSpacer(15)\nlet solarkwhtext = exportvalue.addText(Math.round(solarkwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet homewhtext = exportvalue.addText(Math.round(homekwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet exportkwhtext = exportvalue.addText(Math.round(exportkwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet importkwhtext = exportvalue.addText(Math.round(importkwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet batterychargekwhtext = exportvalue.addText(Math.round(batterychargekwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet batterydischargekwhtext = exportvalue.addText(Math.round(batterydischargekwh) + \" kWh\");\nexportvalue.addSpacer(23)\nlet batterysoctext = exportvalue.addText(Math.round(batterysoc) + \" %\");\n\nsolarkwhtext.textColor = new Color(\"#ffffff\");\nhomewhtext.textColor = new Color(\"#ffffff\");\nexportkwhtext.textColor = new Color(\"#ffffff\");\nimportkwhtext.textColor = new Color(\"#ffffff\");\nbatterychargekwhtext.textColor = new Color(\"#ffffff\");\nbatterydischargekwhtext.textColor = new Color(\"#ffffff\");\nbatterysoctext.textColor = new Color(\"#ffffff\");\n\t\n  listwidget.backgroundColor = new Color(\"#000000\");\n  await renderSection(\"top\");\n  \/\/await renderSection(\"middle\");\n  \/\/await renderSection(\"bottom\");  \n  listwidget.addSpacer(0);\n  let moms = listwidget.addStack();\n  momstext = moms.addText(\"v. \" + version);\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n\tmoms.addSpacer();\n  momstext = moms.addText(\"updated \" + settings.updatehour + \":\" + settings.updateminute);\n  momstext.font = Font.lightSystemFont(10);\n  momstext.textColor = new Color(\"#ffffff\");\n  return listwidget;\n}\n\nwidget = await createWidget();\n\nif (config.runsInWidget) {\n  Script.setWidget(widget);\n} else {\n  if (Math.random() < 0.5) {\n    let alert = new Alert();\n    alert.title = \"Support\";\n    alert.message = t(\"buymeacoffee\") + \"?\";\n    alert.addCancelAction(\"Buymeacoffee 👍\");\n\t  alert.addAction(\"Ko-fi 👍\");\n    alert.addAction(t(\"noway\"));\n    let response = await alert.present();\n    if (response === -1) {\n      Safari.open(\"https:\/\/buymeacoffee.com\/flopp999\");\n    }\n\t\tif (response === 0) {\n        Safari.open(\"https:\/\/ko-fi.com\/flopp999\");\n    }\n  }\n}\n\nwidget.presentLarge()\nScript.complete();\n",
  "share_sheet_inputs" : [

  ]
}